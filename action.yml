name: 'WIPAC Dev Py Dependencies'
description: 'GitHub Action Package for Automating Python-Package Dependency Management'

inputs:
  docker_tag_to_dep:
    description: 'The tag attached to each docker image demarcating it for dep-logging!'
    required: false
    default: py-dep-this
  dockerfile_ignore_paths:
    description: 'A comma-delimited list of Dockerfile* filepaths to skip'
    required: false
    default: ""


# outputs:
#   random-number:
#     description: "Random number"
#     value: ${{ steps.random-number-generator.outputs.random-id }}

runs:
  using: "composite"
  steps:
    - uses: actions/setup-python@v4
      with:
        python-version: '3.11'  # NOTE: update, someday. Also tests.yml

    - name: Is this the most recent commit? It won't be if the action was reran
      run: |
        # step: Is this the most recent commit? It won't be if the action was reran
        set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
        # check git status
        echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        git fetch &> /dev/null
        if [[ $(git status -sb | grep behind) ]]; then
          echo "IS_GIT_BEHIND=true" >> $GITHUB_ENV
          echo "this commit is not the most recent on this branch -- rest of action will be skipped"
        fi
      shell: bash

    - name: Git config
      if: env.IS_GIT_BEHIND != 'true'
      run: |
        # step: Git config
        set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
        # git config
        echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        git config user.name ${{ inputs.git_committer_name }}
        git config user.email ${{ inputs.git_committer_email }}
      shell: bash

    - name: Figure Project's Max Py Version
      if: env.IS_GIT_BEHIND != 'true'
      run: |
        # step: Figure Project's Max Py Version
        set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"

        sudo apt-get update
        python -m venv action_venv
        . action_venv/bin/activate
        pip3 install wipac-dev-tools[semver]

        MAX_PY=$(python -c "
        from wipac_dev_tools import semver_parser_tools

        top_python = semver_parser_tools.get_latest_py3_release()
        all_matches = semver_parser_tools.list_all_majmin_versions(
          major=top_python[0],
          semver_range=semver_parser_tools.get_py_semver_range_for_project(),
          max_minor=top_python[1],
        )

        print(f'{max(all_matches)[0]}.{max(all_matches)[1]}')
        ")
        echo "detected project's max supported python: $MAX_PY"
        
        rm -rf action_venv/
        echo "PACKAGE_MAX_PYTHON_VERSION=$MAX_PY" >> "$GITHUB_ENV"
      shell: bash

    - name: pip install reqs
      if: env.IS_GIT_BEHIND != 'true'
      run: |
        # step: pip install reqs
        set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
        sudo apt-get update
        pip3 install -r ${{ github.action_path }}/requirements.txt
      shell: bash

    - name: Build dependencies.log (and commit)
      if: env.IS_GIT_BEHIND != 'true'
      env:
        ACTION_REPOSITORY: ${{ github.action_repository }}  # https://github.com/github/docs/issues/25336#issuecomment-1736251764
        GITHUB_ACTION_PATH: ${{ github.action_path }}
        DOCKER_TAG_TO_DEP: ${{ inputs.docker_tag_to_dep }}
        DEST_DIRECTORY_IF_WANTED: dependencies-logs/
      run: |
        # step: Build dependencies.log (and commit)
        set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
        # build dependencies.log (and commit)
        set +x; echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"; set -x
        
        # append permissive line to .gitignore since *.log is commonly present
        line='!dependencies*.log'
        if [[ ! $(grep -F "$line" .gitignore) ]]; then
          echo "" >> .gitignore
          echo "" >> .gitignore
          echo "# wipac-dev-py-setup-action" >> .gitignore
          echo "$line" >> .gitignore
          git add .gitignore
          git commit -m "<bot> update .gitignore" || true  # okay if no change
          tail .gitignore
        fi
        
        set +x; echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"; set -x
        
        # remove any old ones, then regenerate only what's needed
        (find . -name "dependencies*.log" -type f -print0 | xargs -0 rm) || true
        
        # run script
        export REPO_PATH=$(pwd)
        export DOCKERFILE_IGNORE_PATHS="${{ inputs.dockerfile_ignore_paths }}"
        /bin/bash $GITHUB_ACTION_PATH/action.sh
        
        set +x; echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"; set -x
        
        if [[ $( echo "${{ inputs.use_directory }}" | awk '{print tolower($0)}' ) == "true" ]]; then
            mkdir -p $DEST_DIRECTORY_IF_WANTED
            find . -name "dependencies*.log" -type f -exec mv -i {} $DEST_DIRECTORY_IF_WANTED  \;
        fi
        
        # Commit
        git add .
        git commit -m "<bot> update dependencies*.log files(s)" || true  # okay if no change
      shell: bash

    - name: Push changes
      if: env.IS_GIT_BEHIND != 'true'
      run: |
        # step: Push changes
        set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
        # push changes (if needed)
        echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        status=`git status 2>&1 | tee`
        ahead=`echo -n "${status}" 2> /dev/null | grep "Your branch is ahead of" &> /dev/null; echo "$?"`
        if [ "$ahead" -eq "1" ]; then
          echo "no changes needed"
          exit 0
        fi
        git push
        echo "changes pushed"
      shell: bash
