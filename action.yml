name: 'WIPAC Dev Py Dependencies'
description: 'GitHub Action Package for Automating Python-Package Dependency Management'

inputs:
  docker_tag_to_dep:
    description: 'The tag attached to each docker image demarcating it for dep-logging!'
    required: false
    default: py-dep-this
  dockerfile_ignore_paths:
    description: 'A comma-delimited list of Dockerfile* filepaths to skip'
    required: false
    default: ""


# outputs:
#   random-number:
#     description: "Random number"
#     value: ${{ steps.random-number-generator.outputs.random-id }}

runs:
  using: "composite"
  steps:
    - uses: actions/setup-python@v4

    - name: Figure Project's Max Py Version
      run: |
        # step: Figure Project's Max Py Version
        set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"

        sudo apt-get update
        python -m venv action_venv
        . action_venv/bin/activate
        pip3 install wipac-dev-tools[semver]

        MAX_PY=$(python -c "
        from wipac_dev_tools import semver_parser_tools

        top_python = semver_parser_tools.get_latest_py3_release()
        all_matches = semver_parser_tools.list_all_majmin_versions(
          major=top_python[0],
          semver_range=semver_parser_tools.get_py_semver_range_for_project(),
          max_minor=top_python[1],
        )

        print(f'{max(all_matches)[0]}.{max(all_matches)[1]}')
        ")
        echo "detected project's max supported python: $MAX_PY"
        
        rm -rf action_venv/
        echo "PACKAGE_MAX_PYTHON_VERSION=$MAX_PY" >> "$GITHUB_ENV"
      shell: bash

    - name: pip install reqs
      run: |
        # step: pip install reqs
        set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
        sudo apt-get update
        pip3 install -r ${{ github.action_path }}/requirements.txt
      shell: bash

    - name: Build dependencies.log (and commit)
      env:
        ACTION_REPOSITORY: ${{ github.action_repository }}  # https://github.com/github/docs/issues/25336#issuecomment-1736251764
        GITHUB_ACTION_PATH: ${{ github.action_path }}
        DOCKER_TAG_TO_DEP: ${{ inputs.docker_tag_to_dep }}
      run: |
        # step: Build dependencies.log (and commit)
        set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
        # build dependencies.log (and commit)
        set +x; echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"; set -x
        
        # remove any old ones, then regenerate only what's needed
        (find . -name "dependencies*.log" -type f -print0 | xargs -0 rm) || true
        
        # run script
        export REPO_PATH=$(pwd)
        export DOCKERFILE_IGNORE_PATHS="${{ inputs.dockerfile_ignore_paths }}"
        /bin/bash $GITHUB_ACTION_PATH/action.sh
        
        set +x; echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"; set -x

      shell: bash

    - name: Fetch default branch
      run: |
        # step: Fetch default branch
        set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
        default_branch="$(git remote show origin | awk '/HEAD branch/ {print $NF}')"
        echo "Default branch is $default_branch"
        git fetch origin "$default_branch":"refs/remotes/origin/$default_branch"
        echo "DEFAULT_BRANCH=$default_branch" >> "$GITHUB_ENV"
      shell: bash

    - name: Dump diffs to console
      run: |
        # step: Dump diffs to console
        set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"

        echo "##[group]Starting diff against default branch"
        default_branch="$DEFAULT_BRANCH"

        shopt -s globstar nullglob
        for file in **/dependencies*.log; do
            fname=$(basename "$file")

            match_path=$(git ls-tree -r --name-only "origin/$default_branch" | grep "/$fname$" | head -n1 || true)
            if [[ -z "$match_path" ]]; then
                echo "::notice::No matching file for '$fname' in $default_branch"
                cat "$file"
                continue
            fi

            echo "====> Diffing $file with $default_branch:$match_path <===="
            tmp_ref="/tmp/old_$fname"
            git show "origin/$default_branch:$match_path" > "$tmp_ref" || {
                echo "::warning::Failed to extract $match_path from $default_branch"
                continue
            }

            echo "::group::Diff: $file"
            if ! diff -u "$tmp_ref" "$file"; then
                echo "::notice::Diff above for $file vs $default_branch:$match_path"
            else
                echo "::notice::$fname is unchanged from $default_branch"
            fi
            echo "::endgroup::"
        done
        echo "##[endgroup]"
      shell: bash
