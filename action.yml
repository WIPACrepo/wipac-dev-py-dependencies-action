name: 'WIPAC Dev Py Dependencies'
description: 'GitHub Action Package for Automating Python-Package Dependency Management'

inputs:
  dockerfile_ignore_paths:
    description: 'A comma-delimited list of Dockerfile* filepaths to skip'
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - uses: actions/setup-python@v4

    ####################################################################################
    # IF RECENT RUN DETECTED, USE PREVIOUS ARTIFACT
    #
    # NOTE: The recency check below is ONLY applied on NON-DEFAULT branches.
    ####################################################################################

    - uses: WIPACrepo/wipac-dev-recent-run-check-action@v1.0
      id: recent
      with:
        window-seconds: 3600
        always-false-on-default-branch: true

    - if: ${{ steps.recent.outputs.ran_recently == 'true' }}
      run: echo "Recent run detected — reusing the last artifact for this branch."
      shell: bash

    - name: "Find latest prior artifact on this branch"
      if: ${{ steps.recent.outputs.ran_recently == 'true' }}
      id: find_artifact
      env:
        GH_TOKEN: ${{ github.token }}
        BRANCH: ${{ github.ref_name }}
        RUN_ID: ${{ github.run_id }}
      run: |
        # step: "Find latest prior artifact on this branch"
        set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"

        REPO="${{ github.repository }}"

        echo "##[group]fetching artifacts list"
        curl -sS -H "Authorization: Bearer ${GH_TOKEN}" \
             -H "Accept: application/vnd.github+json" \
             "https://api.github.com/repos/${REPO}/actions/artifacts?name=py-dependencies-logs&per_page=100" \
             > artifacts.json
        echo "##[endgroup]"

        python "${{ github.action_path }}/action-scripts/select_latest_branch_artifact.py" \
          --artifacts-json artifacts.json \
          --branch "$BRANCH" \
          --exclude-run-id "$RUN_ID" \
          --github-output "$GITHUB_OUTPUT"
      shell: bash

    - name: "Download prior artifact"
      if: ${{ steps.recent.outputs.ran_recently == 'true' }}
      uses: actions/download-artifact@v4
      with:
        name: ${{ steps.find_artifact.outputs.artifact_name }}
        path: artifacts

    ####################################################################################
    # NO RECENT RUN DETECTED — PROCEEDING TO GENERATE
    ####################################################################################

    - name: "Check if old files need to be removed"
      if: ${{ steps.recent.outputs.ran_recently == 'false' }}
      run: |
        # step: "Check if old files need to be removed"
        set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
        if find . -name "dependencies*.log" -type f | grep -q .; then
            echo "::error::dependencies*.log must be manually deleted -- v3 doesn't use these files"
            exit 1
        fi
      shell: bash

    - name: "Set shared env"
      if: ${{ steps.recent.outputs.ran_recently == 'false' }}
      run: |
        # step: "Set shared env"
        set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"

        STORE_PYDL_FILES_HERE="/tmp/py-dep-logs"
        mkdir -p "$STORE_PYDL_FILES_HERE"
        echo "STORE_PYDL_FILES_HERE=$STORE_PYDL_FILES_HERE" >> "$GITHUB_ENV"

        PYDL_FNAME_PREFIX="py-dependencies"
        echo "PYDL_FNAME_PREFIX=$PYDL_FNAME_PREFIX" >> "$GITHUB_ENV"
      shell: bash

    - name: "Figure Project's Max Py Version"
      if: ${{ steps.recent.outputs.ran_recently == 'false' }}
      run: |
        # step: "Figure Project's Max Py Version"
        set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"

        echo "##[group]installs"
        sudo apt-get update
        python -m venv action_venv
        . action_venv/bin/activate
        pip3 install wipac-dev-tools[semver]
        echo "##[endgroup]"

        MAX_PY=$(python "${{ github.action_path }}/action-scripts/compute_max_python.py")
        echo "detected project's max supported python: $MAX_PY"

        rm -rf action_venv/
        echo "PACKAGE_MAX_PYTHON_VERSION=$MAX_PY" >> "$GITHUB_ENV"
      shell: bash

    - name: "pip install reqs"
      if: ${{ steps.recent.outputs.ran_recently == 'false' }}
      run: |
        # step: "pip install reqs"
        set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
        echo "##[group]pip installs"
        sudo apt-get update
        pip3 install -r ${{ github.action_path }}/requirements.txt
        echo "##[endgroup]"
      shell: bash

    - name: "Build dependencies.log (and commit)"
      if: ${{ steps.recent.outputs.ran_recently == 'false' }}
      env:
        ACTION_REPOSITORY: ${{ github.action_repository }}  # https://github.com/github/docs/issues/25336#issuecomment-1736251764
        GITHUB_ACTION_PATH: ${{ github.action_path }}
        DOCKER_TAG_TO_PYDL: "py-dep-this"
        PODMAN_STATIC_VERSION: v5.6.1  # update as needed
      run: |
        # step: "Build dependencies.log (and commit)"
        set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"

        echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"

        export REPO_PATH=$(pwd)
        export DOCKERFILE_IGNORE_PATHS="${{ inputs.dockerfile_ignore_paths }}"

        # run script
        echo "##[group]generating dep logs"
        /bin/bash "$GITHUB_ACTION_PATH/action.sh"
        echo "##[endgroup]"

        ls $STORE_PYDL_FILES_HERE

        echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
      shell: bash

    - name: "Fetch default branch"
      if: ${{ steps.recent.outputs.ran_recently == 'false' }}
      run: |
        # step: "Fetch default branch"
        set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"

        echo "##[group]fetching default branch"

        default_branch="$(git remote show origin | awk '/HEAD branch/ {print $NF}')"
        echo "Default branch is $default_branch"
        git fetch origin "$default_branch":"refs/remotes/origin/$default_branch"
        echo "DEFAULT_BRANCH=$default_branch" >> "$GITHUB_ENV"

        echo "##[endgroup]"
      shell: bash

    ####################################################################################
    # ALWAYS: UPLOAD, THEN DUMP ARTIFACT CONTENTS
    ####################################################################################

    - name: "Upload as artifacts"
      uses: actions/upload-artifact@v4
      with:
        name: py-dependencies-logs
        path: artifacts/
        if-no-files-found: error

    - name: "Dump artifact contents"
      run: |
        # step: "Dump artifact contents"
        set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
        /bin/bash "${{ github.action_path }}/action-scripts/dump_artifacts.sh" artifacts
      shell: bash
