name: 'WIPAC Dev Py Dependencies'
description: 'GitHub Action Package for Automating Python-Package Dependency Management'

inputs:
  dockerfile_ignore_paths:
    description: 'A comma-delimited list of Dockerfile* filepaths to skip'
    required: false
    default: ""

runs:
  using: "composite"
  steps:
    - uses: actions/setup-python@v4

    - name: Check if old files need to be removed
      run: |
        # step: Check if old files need to be removed
        set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
        if find . -name "dependencies*.log" -type f | grep -q .; then
            echo "::error::dependencies*.log must be manually deleted -- v3 doesn't use these files"
            exit 1
        fi
      shell: bash

    - name: Set shared env
      run: |
        # step: Set shared env
        set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
        
        STORE_PYDL_FILES_HERE="/tmp/py-dep-logs"
        mkdir -p $STORE_PYDL_FILES_HERE
        echo "STORE_PYDL_FILES_HERE=$STORE_PYDL_FILES_HERE" >> "$GITHUB_ENV"
        
        PYDL_FNAME_PREFIX="py-dependencies"
        echo "PYDL_FNAME_PREFIX=$PYDL_FNAME_PREFIX" >> "$GITHUB_ENV"
      shell: bash


    - name: Figure Project's Max Py Version
      run: |
        # step: Figure Project's Max Py Version
        set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"

        echo "##[group]installs"
        sudo apt-get update
        python -m venv action_venv
        . action_venv/bin/activate
        pip3 install wipac-dev-tools[semver]
        echo "##[endgroup]"
        
        MAX_PY=$(python -c "
        from wipac_dev_tools import semver_parser_tools

        top_python = semver_parser_tools.get_latest_py3_release()
        all_matches = semver_parser_tools.list_all_majmin_versions(
          major=top_python[0],
          semver_range=semver_parser_tools.get_py_semver_range_for_project(),
          max_minor=top_python[1],
        )

        print(f'{max(all_matches)[0]}.{max(all_matches)[1]}')
        ")
        echo "detected project's max supported python: $MAX_PY"
        
        rm -rf action_venv/
        echo "PACKAGE_MAX_PYTHON_VERSION=$MAX_PY" >> "$GITHUB_ENV"
      shell: bash

    - name: pip install reqs
      run: |
        # step: pip install reqs
        set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
        echo "##[group]pip installs"
        sudo apt-get update
        pip3 install -r ${{ github.action_path }}/requirements.txt
        echo "##[endgroup]"
      shell: bash

    - name: Build dependencies.log (and commit)
      env:
        ACTION_REPOSITORY: ${{ github.action_repository }}  # https://github.com/github/docs/issues/25336#issuecomment-1736251764
        GITHUB_ACTION_PATH: ${{ github.action_path }}
        DOCKER_TAG_TO_PYDL: "py-dep-this"
      run: |
        # step: Build dependencies.log (and commit)
        set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
        
        echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        
        export REPO_PATH=$(pwd)
        export DOCKERFILE_IGNORE_PATHS="${{ inputs.dockerfile_ignore_paths }}"
        
        # run script
        echo "##[group]generating dep logs"
        /bin/bash $GITHUB_ACTION_PATH/action.sh
        echo "##[endgroup]"
        
        ls $STORE_PYDL_FILES_HERE
        
        echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"

      shell: bash

    - name: Fetch default branch
      run: |
        # step: Fetch default branch
        set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"
        
        echo "##[group]fetching default branch"
        
        default_branch="$(git remote show origin | awk '/HEAD branch/ {print $NF}')"
        echo "Default branch is $default_branch"
        git fetch origin "$default_branch":"refs/remotes/origin/$default_branch"
        echo "DEFAULT_BRANCH=$default_branch" >> "$GITHUB_ENV"
        
        echo "##[endgroup]"
      shell: bash

    - name: Dump diffs to console
      env:
        GITHUB_TOKEN: ${{ github.token }}
      run: |
        # step: Dump diffs to console
        set -euo pipefail; echo "now: $(date -u +"%Y-%m-%dT%H:%M:%S.%3N")"

        mkdir -p artifacts

        shopt -s globstar nullglob
        for file in $STORE_PYDL_FILES_HERE/*.log; do
            fname=$(basename "$file")
            old_file=$(mktemp)

            echo " "
            echo " "
            echo " "
            echo "====> $file <$(printf '=%.0s' $(seq 1 $((72 - 7 - ${#file}))))"
            echo " "

            cp "$file" "artifacts/$fname"
            diff_file="artifacts/${fname%.log}.diff"

            # find the old file and diff it
            if ! python3 \
                "${{ github.action_path }}/utils/get_old_pydl_file.py" \
                "$fname" "$DEFAULT_BRANCH" "${{ github.repository }}" \
                > "$old_file"
            then
                # no old file?
                echo "<new file>" > "$diff_file"
                echo "::notice::file is new (no old version)"
                cat "$file"
                continue
            else
                # show diff
                echo "::notice::diff: $file"
                sed -i ':a; /./!{$d;N;ba};' "$old_file"  # remove trailing blank lines
                sed -i ':a; /./!{$d;N;ba};' "$file"      # remove trailing blank lines
                # NOTE: 'diff' exits w/ 0 (no change), 1 (changes), >1 (error)
                fmt_opts=(
                  --old-line-format='- %L'
                  --new-line-format='+ %L'
                  --unchanged-line-format='  %L'
                )
                if ! diff "${fmt_opts[@]}" "$old_file" "$file" > "$diff_file"; then
                    # also print with color, but don't save ANSI to file
                    diff --color=always "${fmt_opts[@]}" "$old_file" "$file" || true
                else
                    echo "<no changes>" > "$diff_file"
                    echo "::notice::$fname is unchanged"
                fi
            fi
        done
        echo " "

      shell: bash

    - name: Upload as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: py-dependencies-logs
        path: artifacts/
        if-no-files-found: error
