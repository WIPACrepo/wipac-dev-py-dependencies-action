name: 'WIPAC Dev Py Dependencies'
description: 'GitHub Action Package for Automating Python-Package Dependency Management'

inputs:
  git_committer_name:
    description: 'The name used for "git config user.name"'
    required: false
    default: github-actions
  git_committer_email:
    description: 'The email used for "git config user.email"'
    required: false
    default: github-actions@github.com
  docker_tag_to_dep:
    description: 'The email used for "git config user.email"'
    required: false
    default: py-dep-this


# outputs:
#   random-number:
#     description: "Random number"
#     value: ${{ steps.random-number-generator.outputs.random-id }}

runs:
  using: "composite"
  steps:
    - uses: actions/setup-python@v4
      with:
        python-version: '3.11'  # NOTE: update, someday. Also tests.yml

    - name: Is this the most recent commit? It won't be if the action was reran
      run: |
        # check git status
        echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        git fetch &> /dev/null
        if [[ $(git status -sb | grep behind) ]]; then
          echo "IS_GIT_BEHIND=true" >> $GITHUB_ENV
          echo "this commit is not the most recent on this branch -- rest of action will be skipped"
        fi
      shell: bash

    - name: Git config
      if: env.IS_GIT_BEHIND != 'true'
      run: |
        # git config
        echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        git config user.name ${{ inputs.git_committer_name }}
        git config user.email ${{ inputs.git_committer_email }}
      shell: bash

    - name: Install sysbox (needed for docker-in-docker)
      if: env.IS_GIT_BEHIND != 'true'
      run: |
        # install sysbox (needed for docker-in-docker)
        echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        temp_dir=$(mktemp -d)
        cd $temp_dir
        # https://github.com/nestybox/sysbox/blob/master/docs/user-guide/install-package.md
        wget https://downloads.nestybox.com/sysbox/releases/v0.6.4/sysbox-ce_0.6.4-0.linux_amd64.deb
        docker rm $(docker ps -a -q) -f  ||  echo "ok: no docker containers to remove"
        sudo apt-get install jq
        sudo apt-get install ./sysbox-ce_0.6.4-0.linux_amd64.deb
        # sudo systemctl status sysbox -n20  # used below
        cd ..
        rm -rf $temp_dir
      shell: bash

    - name: Get Docker container
      if: env.IS_GIT_BEHIND != 'true'
      id: container
      env:
        action_repository: ${{ github.action_repository }}  # https://github.com/github/docs/issues/25336#issuecomment-1736251764
        action_ref: ${{ github.action_ref }}  # https://github.com/github/docs/issues/25336#issuecomment-1736251764
      run: |
        # get this action's docker image/container
        echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        
        lower_action_repo="$(echo "$action_repository" | awk '{print tolower($0)}')"
        image="$lower_action_repo:$action_ref"
        image_src="ghcr.io/$image"
        
        echo "pulling image from $image_src ..."
        if docker pull $image_src; then
            CONTAINER=$image
        else
            # check if there *should* be an image (v# tag)
            vtag_pat="v[0-9]"  # matching essentially uses 'startswith' logic
            if [[ $action_ref =~ $vtag_pat ]]; then 
                echo "ERROR: image not found at $image_src and it should exist (tag is $action_ref)"
                exit 1
            fi
            # this is a branch, so build locally
            echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
            echo "PULLING IMAGE FAILED -- BUILDING LOCAL"
            CONTAINER="thisaction:local"
            docker build --tag $CONTAINER ${{ github.action_path }}
        fi
        
        set +x; echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"; set -x
        echo "CONTAINER=$CONTAINER" >> "${GITHUB_OUTPUT}"
      shell: bash

    - name: Build dependencies.log (and commit)
      if: env.IS_GIT_BEHIND != 'true'
      env:
        action_repository: ${{ github.action_repository }}  # https://github.com/github/docs/issues/25336#issuecomment-1736251764
      run: |
        # build dependencies.log (and commit)
        set +x; echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"; set -x
        
        # activate sysbox -- https://github.com/nestybox/sysbox/blob/master/docs/user-guide/install-package.md
        sudo systemctl status sysbox -n20
        
        # append permissive line to .gitignore since *.log is commonly present
        line='!dependencies*.log'
        if [[ ! $(grep -F "$line" .gitignore) ]]; then
          echo "" >> .gitignore
          echo "" >> .gitignore
          echo "# wipac-dev-py-setup-action" >> .gitignore
          echo "$line" >> .gitignore
          git add .gitignore
          git commit -m "<bot> update .gitignore" || true  # okay if no change
          tail .gitignore
        fi
        
        set +x; echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"; set -x
        
        mkdir saved-images/ && trap 'rm -rf saved-images/' EXIT
        images_to_dep=$(sudo docker images | awk -v pat="${{ inputs.docker_tag_to_dep }}" '$2==pat' | awk -F ' ' '{print $1":"$2}')
        for image in $images_to_dep; do
            # TODO: parallelize (and think if docker container actually needed)
            docker save -o saved-images/$image.tar $image
            docker image rm $image && docker system prune --all --force  # save disk space
        done
        
        set +x; echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"; set -x
        
        # run docker container
        docker run --rm --runtime=sysbox-runc --hostname=syscont \
            --env ACTION_REPOSITORY="$action_repository" \
            --env DOCKER_TAG_TO_DEP="${{ inputs.docker_tag_to_dep }}" \
            --mount type=bind,source=${{ github.action_path }},target=/gha/ \
            --mount type=bind,source=$(pwd),target=/repo/ \
            --mount type=bind,source=$(pwd)/saved-images,target=/saved-images/ \
            ${{ steps.container.outputs.CONTAINER }}
        
        set +x; echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"; set -x
        
        # Commit
        git add .
        git commit -m "<bot> update dependencies*.log files(s)" || true  # okay if no change
      shell: bash

    - name: Push changes
      if: env.IS_GIT_BEHIND != 'true'
      run: |
        # push changes (if needed)
        echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        status=`git status 2>&1 | tee`
        ahead=`echo -n "${status}" 2> /dev/null | grep "Your branch is ahead of" &> /dev/null; echo "$?"`
        if [ "$ahead" -eq "1" ]; then
          echo "no changes needed"
          exit 0
        fi
        git push
        echo "changes pushed"
      shell: bash
